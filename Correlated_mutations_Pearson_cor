#Given that the number of genes in non_progressive samples and progressive samples are different:

#Obtain the gene names from the non_progressive samples:
genes_ <- LC_primary_non_progresive@gene.summary$Hugo_Symbol
genes_

#Obtain the gene names from the progressive samples:
genes_progressive <- LC_primary_progressive@gene.summary$Hugo_Symbol
genes_progressive
F_test_progressive <- vector("list", length = length(genes_progressive))

#Intersect the gene names from non_progressive samples and progressive samples:
L <- intersect(genes_, genes_progressive)

#Create a new_variable to store all the genes that aren't intersected:
A <- c()

library(dplyr)

for (i in genes_progressive) {
  if (!(i %in% L)) {
    A <- c(A, i)
  }
}

#obtain all the unique gene names from non_progressive and progressive samples:
new_genes <- c(genes_, A)

#Obtain the list of the non_progressive samples mutated for each gene:
LC_NP <- LC_primary_non_progresive@gene.summary[, 12]
LC_NP <- as.data.frame(LC_NP)
row.names(LC_NP) <- genes_

#Obtain the list of the progressive samples mutated for each gene:
LC_P <- LC_primary_progressive@gene.summary[, 12]
LC_P <- as.data.frame(LC_P)
row.names(LC_P) <- genes_progressive

#list with all the genes
df_person_genes <- vector("list", length = length(new_genes))
names(df_person_genes) <- new_genes

#create the contingency table
for (i in new_genes) {
  v <- c()
  x <- c()
  ifelse((i %in% row.names(LC_NP)), v <- LC_NP[i, ], v <- 0)
  ifelse((i %in% row.names(LC_P)), x <- LC_P[i, ], x <- 0)
  a <- c()
  b <- c()
  if (v > 0) {
    for (j in 1:v) {  
      NP <- 0
      Mut <- 1
      a <- c(a, NP)
      b <- c(b, Mut)
    }
  }
  df_mut_NP <- cbind(a, b)
  c <- c()
  d <- c()
  if (x > 0) {
    for (k in 1:x) {  
      P <- 1
      Mut <- 1
      c <- c(c, P)
      d <- c(d, Mut)
    }
  }
  df_mut_P <- cbind(c, d)
  e <- c()
  f <- c()
  if (18 - v > 0) {
    for (l in 1:(18 - v)) {  
      NP <- 0
      WT <- 0
      e <- c(e, NP)
      f <- c(f, WT)
    }
  }
  df_wt_NP <- cbind(e, f)
  g <- c()
  h <- c()
  if (7 - x > 0) {
    for (m in 1:(7 - x)) {  
      P <- 1
      WT <- 0
      g <- c(g, P)
      h <- c(h, WT)
    }
  }
  
  df_wt_P <- cbind(g, h)
  df_final <- rbind(df_mut_P, df_mut_NP, df_wt_NP, df_wt_P)
  colnames(df_final) <- c("RESPONSE", "STATE")
  df_person_genes[[i]] <- df_final
  
}

pearson_test_all <- vector("list", length = length(df_person_genes))
names(pearson_test_all) <- names(df_person_genes)
genes_sign_f <- c()
pValue_f <- c()
cor_value <-c()

#Calculate the Pearson correlation:
for (i in 1:length(df_person_genes)) {
  df <- as.data.frame(df_person_genes[[i]])
  # Check if standard deviation of either variable is zero
  if (sd(df$RESPONSE) == 0 || sd(df$STATE) == 0) {
    # Skip correlation test and assign NA values
    test <- list(p.value = NA, estimate = NA)
  } else {
    # Perform correlation test
    test <- cor.test(df$RESPONSE, df$STATE, method = "pearson")
  }
  pearson_test_all[[i]] <- test
  if (!is.na(test$p.value) && test$p.value <= 0.05) {
    genes_sign_f <- c(genes_sign_f, names(pearson_test_all)[i])
    pValue_f <- c(pValue_f, test$p.value)
    cor_value<- c(cor_value, test$estimate)
  }
}

#Obtain the final Pearson correlation table with the pValue_f, p_value_adjust and cor_value (pearsons correlation for each gene):
p_value_adjust<-p.adjust(pValue_f)
ft <- cbind(genes_sign_f, pValue_f,p_value_adjust,cor_value)
ft<-as.data.frame(ft)

#Subset that table to only the gene names with associations with a p_value_adjust<1:
ft_<-ft[ft$p_value_adjust<0.05,]
View(ft_)

#Obtain the list of genes, to plot with co-oncoplot function, the correlated mutations on those genes comparing in the progressive samples vs the non-progressive samples:
names_genes_cor<-ft_$genes_sign_f
final_genes_cor<-unique(names_genes_cor)

#Go to step number. oncoplot in file DNA_ANALYSIS_MAF_TOOLS_PROGRESSIVE_VS_NON_PROGRESSIVE

# Print out or assign the results to a variable
print(ft)

#########################################################################################################################################################
#PROGRESSION-FREE SURVIVAL###############################################################################################################################

correct_final_genes_cor<-c("PRELID1","GNA14","H2AC21","GDF7","TEX36")

coOncoplot(m1 = LC_primary_progressive,m2 = LC_primary_non_progresive,m1Name = "PROGRESSIVE",m2Name = "NON-PROGRESSIVE",genes = correct_final_genes_cor,colors = vc_cols,showSampleNames = TRUE)

#CLINICAL DATA
library(data.table)
library(readxl)

progressive_clinical<-read_excel("C:/Users/ritas/Desktop/TESE_IMM/ILLUMINA/BD_Lung_MCPP_Illumina_type_biopsie.xlsx")
View(progressive_clinical)

progressive_clinical$`ID LAB` <- gsub("#", "", progressive_clinical$`ID LAB`)

ID_progressive<-unique(LC_primary_progressive@data$Tumor_Sample_Barcode)
ID_non_progressive<-unique(LC_primary_non_progresive@data$Tumor_Sample_Barcode)

TOTAL_ID<-c(ID_progressive,ID_non_progressive)
TOTAL_ID<-c("10_LC","36_LC","38_LC","51_LC","52_LC","59_LC","83_LC","33_LC","35_LC","37_LC","40_LC","42_LC","44_LC","47_LC","49_LC","4_LC","54_LC","63_LC","73_LC","79_LC","7_LC","80_LC","82_LC","9LC")
TOTAL_ID<-as.data.frame(TOTAL_ID)
colnames(TOTAL_ID)<-"ID LAB"
TOTAL_ID$`ID LAB` <- gsub("_", "", TOTAL_ID$`ID LAB`)
View(TOTAL_ID)

# Select rows where the values in "column_name" match each value in the list
progressive_clinical<-as.data.frame(progressive_clinical)

merged_df <- merge(progressive_clinical, TOTAL_ID, by = "ID LAB")
View(merged_df)

library(openxlsx)
#change the format of dates:
#A.DATE OF INICIATION OF IMMUNOTHERAPY
number_date_immunotherapy<-as.numeric(merged_df$`Immuno start date`)

datesConverted <- convertToDate(number_date_immunotherapy); datesConverted

merged_df$`Immuno start date` <- datesConverted

#B.DATE OF PROGRESSION
number_date_progression<-as.numeric(merged_df$`Progression date`)

datesConverted <- convertToDate(number_date_progression); datesConverted

merged_df$`Progression date` <- datesConverted

#C.DATE OF LAST-FOLLOW-UP-NÃƒO EVENTO
merged_df$`Last follow-up` <- gsub("UTC", "", merged_df$`Last follow-up`)


#DO THE DATES DO DAYS
#DO THE EVENT:
#days_to_progression<-round(difftime(merged_df$`Progression date`,merged_df$`Immuno start date`,units = "days"))

merged_df$"Months to Progression"<-round(interval(merged_df$`Immuno start date`, merged_df$`Progression date`) / months(1),2) 
#DO THE NO EVENT:

merged_df$"Months to last follow up"<-round(interval(merged_df$`Immuno start date`,merged_df$`Last follow-up`) / months(1),2)

#CREATE DATAFRAME:
P_vs_NP_data_frame<-cbind(merged_df$`ID LAB`,
                          merged_df$`Best overall response (BOR)`,
                          merged_df$`Months to Progression`,
                          merged_df$`Months to last follow up`)
colnames(P_vs_NP_data_frame)<-c("ID LAB","Response","Months to Progression","Months to last follow up")
P_vs_NP_data_frame<-as.data.frame(P_vs_NP_data_frame)
View(P_vs_NP_data_frame)

#Kapler Meier:
#TIME<-determine the column time with days to progression if exists progression and days to last followup if doesn't exist progression.
Time<-as.numeric(ifelse(P_vs_NP_data_frame$Response=="PD (Progressive disease)",P_vs_NP_data_frame$`Months to Progression`,P_vs_NP_data_frame$`Months to last follow up`))
Time<-as.data.frame(Time)
colnames(Time)<-"Time"
View(Time)

Progression_status<-as.numeric(ifelse(P_vs_NP_data_frame$Response=="PD (Progressive disease)",1,0)) #NOTE:1 EQUALS PD AND 0 EQUALS THE OTHER RESPONSES
P_vs_NP_data_frame<-cbind(P_vs_NP_data_frame,Time,Progression_status)
View(P_vs_NP_data_frame)

#MUTATIONS IN PROGRESSIVE
#A.MUTATION GNA14
MUTATION_GNA14<-as.numeric(c("1","0","0","1","0","0","0","0","0","1","0","0","1","1","0","1","0","0","0","0","0","0","1","0"))
MUTATION_GNA14<-as.data.frame(MUTATION_GNA14)
colnames(MUTATION_GNA14)<-"MUTATION GNA14"
P_vs_NP_data_frame<-cbind(P_vs_NP_data_frame,MUTATION_GNA14)
View(P_vs_NP_data_frame)

#B.MUTATION_PRELID1
MUTATION_PRELID1<-as.numeric(c("1","0","0","1","0","0","0","1","0","0","0","0","1","1","0","1","1","0","0","0","0","0","1","0"))
MUTATION_PRELID1<-as.data.frame(MUTATION_PRELID1)
colnames(MUTATION_PRELID1)<-"MUTATION PRELID1"
P_vs_NP_data_frame<-cbind(P_vs_NP_data_frame,MUTATION_PRELID1)
View(P_vs_NP_data_frame)

#C.MUTATION GDF7
MUTATION_GDF7<-as.numeric(c("1","0","0","1","0","1","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","1","0"))
MUTATION_GDF7<-as.data.frame(MUTATION_GDF7)
colnames(MUTATION_GDF7)<-"MUTATION GDF7"
P_vs_NP_data_frame<-cbind(P_vs_NP_data_frame,MUTATION_GDF7)
View(P_vs_NP_data_frame)

#D.MUTATION H2AC21
MUTATION_H2AC21<-as.numeric(c("1","0","0","1","0","0","0","0","0","0","0","0","0","1","0","1","0","0","0","0","0","0","1","0"))
MUTATION_H2AC21<-as.data.frame(MUTATION_H2AC21)
colnames(MUTATION_H2AC21)<-"MUTATION H2AC21"
P_vs_NP_data_frame<-cbind(P_vs_NP_data_frame,MUTATION_H2AC21)
View(P_vs_NP_data_frame)

#F.MUTATION TEX36
MUTATION_TEX36<-as.numeric(c("1","0","0","1","0","1","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","1","0"))
MUTATION_TEX36<-as.data.frame(MUTATION_TEX36)
colnames(MUTATION_TEX36)<-"MUTATION TEX36"
P_vs_NP_data_frame<-cbind(P_vs_NP_data_frame,MUTATION_TEX36)
View(P_vs_NP_data_frame)

#save tsv file:
write.table(P_vs_NP_data_frame,"C:/Users/ritas/Desktop/TESE_IMM/ILLUMINA/maf_clinical.tsv",quote = FALSE,row.names = FALSE,col.names = TRUE,sep="\t")

splots <- list()
#PFS-MUTATION GNA14:
library(survival);
library(survminer)

surv_object <- Surv(unlist(P_vs_NP_data_frame$Time),unlist(P_vs_NP_data_frame$Progression_status))
surv_object

surv_fit_groups<- survfit(surv_object ~ unlist(P_vs_NP_data_frame$`MUTATION GNA14`), data=P_vs_NP_data_frame)

splots[[1]]<-ggsurvplot(surv_fit_groups, conf.int = F, title = "GNA14 MUT/WT",ylab="Progression-free survival (PFS)", xlab = "Time (months)",legend.labs=c("WT", "MUT"),censor = T, pval=T,pval.coord = c(35.00 * 0.2, 0.2))

#PFS-MUTATION PRELID1:
library(survival);
library(survminer)

surv_object <- Surv(unlist(P_vs_NP_data_frame$Time),unlist(P_vs_NP_data_frame$Progression_status))
surv_object

surv_fit_groups<- survfit(surv_object ~ unlist(P_vs_NP_data_frame$`MUTATION PRELID1`), data=P_vs_NP_data_frame)

splots[[2]]<-ggsurvplot(surv_fit_groups, conf.int = F, title = "PRELID1 MUT/WT",ylab="Progression-free survival (PFS)",xlab = "Time (months)",legend.labs=c("WT", "MUT"),censor = T, pval=T,pval.coord = c(35.00 * 0.2, 0.2))

#PFS-MUTATION GDF7:
library(survival);
library(survminer)

surv_object <- Surv(unlist(P_vs_NP_data_frame$Time),unlist(P_vs_NP_data_frame$Progression_status))
surv_object

surv_fit_groups <- survfit(surv_object ~ unlist(P_vs_NP_data_frame$`MUTATION GDF7`), data=P_vs_NP_data_frame)

splots[[3]]<-ggsurvplot(surv_fit_groups, conf.int = F, title = "GDF7 MUT/WT",ylab="Progression-free survival (PFS)",xlab = "Time (months)",legend.labs=c("WT", "MUT"),censor = T, pval=T,pval.coord = c(35.00 * 0.2, 0.2))

#PFS-MUTATION H2AC21:
library(survival);
library(survminer)

surv_object <- Surv(unlist(P_vs_NP_data_frame$Time),unlist(P_vs_NP_data_frame$Progression_status))
surv_object

surv_fit_groups <- survfit(surv_object ~ unlist(P_vs_NP_data_frame$`MUTATION H2AC21`), data=P_vs_NP_data_frame)

splots[[4]]<-ggsurvplot(surv_fit_groups, conf.int = F, title = "H2AC21 MUT/WT",ylab="Progression-free survival (PFS)",xlab = "Time (months)",legend.labs=c("WT", "MUT"),censor = T, pval=T,pval.coord = c(35.00 * 0.2, 0.2))

#PFS-MUTATION TEX36:
library(survival);
library(survminer)

surv_object <- Surv(unlist(P_vs_NP_data_frame$Time),unlist(P_vs_NP_data_frame$Progression_status))
surv_object

surv_fit_groups <- survfit(surv_object ~ unlist(P_vs_NP_data_frame$`MUTATION TEX36`), data=P_vs_NP_data_frame)

splots[[5]]<-ggsurvplot(surv_fit_groups, conf.int = F, title = "TEX36 MUT/WT",ylab="Progression-free survival (PFS)",xlab = "Time (months)",legend.labs=c("WT", "MUT"),censor = T, pval=T,pval.coord = c(35.00 * 0.2, 0.2))


#join all the pfs plots:
arrange_ggsurvplots(splots, print = TRUE,
  ncol = 3, nrow = 2, risk.table.height = 0.4)


